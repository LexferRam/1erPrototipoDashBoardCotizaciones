[{"C:\\Users\\lramirez\\Desktop\\oceanicaproyecto\\src\\index.js":"1","C:\\Users\\lramirez\\Desktop\\oceanicaproyecto\\src\\App.js":"2","C:\\Users\\lramirez\\Desktop\\oceanicaproyecto\\src\\serviceWorkerRegistration.js":"3","C:\\Users\\lramirez\\Desktop\\oceanicaproyecto\\src\\components\\AppBar.js":"4","C:\\Users\\lramirez\\Desktop\\oceanicaproyecto\\src\\components\\Tabs.js":"5","C:\\Users\\lramirez\\Desktop\\oceanicaproyecto\\src\\components\\TabContent.js":"6","C:\\Users\\lramirez\\Desktop\\oceanicaproyecto\\src\\components\\tablas\\GridCotOcea.js":"7","C:\\Users\\lramirez\\Desktop\\oceanicaproyecto\\src\\components\\graficos\\Grafico.js":"8","C:\\Users\\lramirez\\Desktop\\oceanicaproyecto\\src\\components\\tablas\\GridPorcTotal.js":"9","C:\\Users\\lramirez\\Desktop\\oceanicaproyecto\\src\\components\\graficos\\GrafCotVsEm.js":"10","C:\\Users\\lramirez\\Desktop\\oceanicaproyecto\\src\\components\\tablas\\GridCotProdOcea.js":"11","C:\\Users\\lramirez\\Desktop\\oceanicaproyecto\\src\\components\\graficos\\Graficoproductos.js":"12","C:\\Users\\lramirez\\Desktop\\oceanicaproyecto\\src\\components\\tablas\\GridCotOceaPerfil.js":"13","C:\\Users\\lramirez\\Desktop\\oceanicaproyecto\\src\\components\\graficos\\Graficoprodperfil.js":"14","C:\\Users\\lramirez\\Desktop\\oceanicaproyecto\\src\\components\\Exportarexcel.js":"15"},{"size":310,"mtime":1612227647635,"results":"16","hashOfConfig":"17"},{"size":1196,"mtime":1612227323243,"results":"18","hashOfConfig":"17"},{"size":5064,"mtime":499162500000,"results":"19","hashOfConfig":"17"},{"size":792,"mtime":1612227610265,"results":"20","hashOfConfig":"17"},{"size":4641,"mtime":1612248420586,"results":"21","hashOfConfig":"17"},{"size":13220,"mtime":1612247924859,"results":"22","hashOfConfig":"17"},{"size":2931,"mtime":1612236733976,"results":"23","hashOfConfig":"17"},{"size":1440,"mtime":1612238675032,"results":"24","hashOfConfig":"17"},{"size":2744,"mtime":1612245463863,"results":"25","hashOfConfig":"17"},{"size":2087,"mtime":1612240998590,"results":"26","hashOfConfig":"17"},{"size":2160,"mtime":1612241729325,"results":"27","hashOfConfig":"17"},{"size":1557,"mtime":1612241946481,"results":"28","hashOfConfig":"17"},{"size":2003,"mtime":1612242189713,"results":"29","hashOfConfig":"17"},{"size":1519,"mtime":1612242254571,"results":"30","hashOfConfig":"17"},{"size":1564,"mtime":1612244028651,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1ai00lz",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"C:\\Users\\lramirez\\Desktop\\oceanicaproyecto\\src\\index.js",[],["72","73"],"C:\\Users\\lramirez\\Desktop\\oceanicaproyecto\\src\\App.js",[],"C:\\Users\\lramirez\\Desktop\\oceanicaproyecto\\src\\serviceWorkerRegistration.js",[],"C:\\Users\\lramirez\\Desktop\\oceanicaproyecto\\src\\components\\AppBar.js",["74"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport img from \"../img.png\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    // position: \"fixed\",\r\n    zIndex: 999999999999,\r\n    flexGrow: 1,\r\n    width: \"100%\",\r\n  },\r\n  menu: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n  },\r\n  img: {\r\n    width: 150,\r\n  },\r\n}));\r\n\r\nexport default function ButtonAppBar() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar className={classes.menu}>\r\n          <img src={img} className={classes.img} />\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\lramirez\\Desktop\\oceanicaproyecto\\src\\components\\Tabs.js",[],"C:\\Users\\lramirez\\Desktop\\oceanicaproyecto\\src\\components\\TabContent.js",["75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95"],"import React, { useEffect, useState } from \"react\";\r\n//GRID\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n// import Fechas from \"./Fechas\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\nimport axios from \"axios\";\r\nimport { LinearProgress } from \"@material-ui/core\";\r\nimport GridCotOcea from \"./tablas/GridCotOcea\";\r\nimport Grafico from \"./graficos/Grafico\";\r\nimport GridPorcTotal from \"./tablas/GridPorcTotal\";\r\nimport GrafCotVsEm from \"./graficos/GrafCotVsEm\";\r\n\r\nimport GridCotProdOcea from \"./tablas/GridCotProdOcea\";\r\nimport Graficoproductos from \"./graficos/Graficoproductos\";\r\nimport ExportarExcel from \"./Exportarexcel\";\r\n\r\nimport GridCotOceaPerfil from \"./tablas/GridCotOceaPerfil\";\r\nimport Graficoprodperfil from \"./graficos/Graficoprodperfil\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    // flexGrow: 1,\r\n    padding: theme.spacing(1),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(1),\r\n    textAlign: \"center\",\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  chart: {\r\n    marginBottom: 20,\r\n  },\r\n  //*************stilos FECHAS*************** */\r\n  container: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  button: {\r\n    backgroundColor: \" #47c0b6\",\r\n    color: \"white\",\r\n    fontSize: 10,\r\n    borderRadius: 50,\r\n    marginTop: 15,\r\n    marginRight: 10,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: \"center\",\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  [theme.breakpoints.down(\"sm\")]: {\r\n    textField: {\r\n      width: 140,\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(1),\r\n    },\r\n  },\r\n}));\r\n\r\nfunction TabContent({ titulo, url, urlGraph, urlGraph2 }) {\r\n  const classes = useStyles();\r\n  var fecha_hasta = new Date();\r\n  var strfechahasta =\r\n    fecha_hasta.getDate() +\r\n    \"/\" +\r\n    (fecha_hasta.getMonth() + 1) +\r\n    \"/\" +\r\n    fecha_hasta.getFullYear();\r\n  const [value, setValue] = useState({\r\n    fecha_desde: \"01/12/2020\",\r\n    fecha_hasta: strfechahasta,\r\n  });\r\n  const [cotizaciones, setCotizaciones] = useState([]);\r\n  const [isLoad, setIsLoad] = useState(false);\r\n  const [graphdataCot, setGraphdataCot] = useState([]);\r\n  const [graphdataCot2, setGraphdataCot2] = useState([]);\r\n\r\n  const onChangeVal = (e) => {\r\n    setValue({ ...value, [e.target.name]: e.target.value });\r\n    console.log(value);\r\n  };\r\n  const onSubmit = (e) => {\r\n    // e.preventDefault();\r\n    setIsLoad(false);\r\n    /* if(!value.fecha_desde || !value.fecha_hasta){\r\n          return alert(\"Debe ingresar las fechas\")\r\n      }*/\r\n    const arrDesde = value.fecha_desde.split(\"-\");\r\n    const arrHasta = value.fecha_hasta.split(\"-\");\r\n    const fechDesde = arrDesde[2] + \"/\" + arrDesde[1] + \"/\" + arrDesde[0];\r\n    const fechHasta = arrHasta[2] + \"/\" + arrHasta[1] + \"/\" + arrHasta[0];\r\n    const fechas = { fecha_desde: fechDesde, fecha_hasta: fechHasta };\r\n    //--------------------------------------------------------------------\r\n    async function fetchData() {\r\n      const res = await axios.post(url, fechas);\r\n      setCotizaciones(res.data);\r\n\r\n      const resGraph = await axios.post(urlGraph, fechas);\r\n      setGraphdataCot(resGraph.data);\r\n      const resGraph2 = await axios.post(urlGraph2, fechas);\r\n      setGraphdataCot2(resGraph2.data);\r\n      setIsLoad(true);\r\n      await console.log(cotizaciones);\r\n    }\r\n    fetchData();\r\n  };\r\n\r\n  useEffect(() => {\r\n    var fec_hasta_Ini_DT =\r\n      fecha_hasta.getFullYear() +\r\n      \"-\" +\r\n      (fecha_hasta.getMonth() + 1) +\r\n      \"-\" +\r\n      fecha_hasta.getDate();\r\n    var lmes = (fecha_hasta.getMonth() + 1).toString();\r\n    var ldia = fecha_hasta.getDate();\r\n    if (lmes < 9) {\r\n      var mes = \"0\" + (fecha_hasta.getMonth() + 1);\r\n\r\n      if (ldia < 9) {\r\n        var dia = \"0\" + fecha_hasta.getDate();\r\n        fec_hasta_Ini_DT = fecha_hasta.getFullYear() + \"-\" + mes + \"-\" + dia;\r\n      } else {\r\n        fec_hasta_Ini_DT =\r\n          fecha_hasta.getFullYear() + \"-\" + mes + \"-\" + fecha_hasta.getDate();\r\n      }\r\n    }\r\n    // setValue({\r\n    //   fecha_desde: \"2020-12-01\",\r\n    //   fecha_hasta: fec_hasta_Ini_DT,\r\n    // });\r\n    async function fetchData() {\r\n      const res = await axios.post(url, value);\r\n\r\n      setCotizaciones(res.data);\r\n      const resGraph = await axios.post(urlGraph, value);\r\n      setGraphdataCot(resGraph.data);\r\n      const resGraph2 = await axios.post(urlGraph2, value);\r\n      setGraphdataCot2(resGraph2.data);\r\n\r\n      await setValue({\r\n        fecha_desde: \"2020-12-01\",\r\n        fecha_hasta: fec_hasta_Ini_DT,\r\n      });\r\n      await setIsLoad(true);\r\n      await console.log(cotizaciones);\r\n    }\r\n    fetchData();\r\n    //    onSubmit()\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {!isLoad ? (\r\n        <>\r\n          <LinearProgress />\r\n        </>\r\n      ) : (\r\n        <>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              {/* *******************FECHAS************************ */}\r\n              <Grid container spacing={2}>\r\n                <Grid item xs={12}>\r\n                  <Paper elevation={3} className={classes.paper}>\r\n                    <Grid container spacing={2}>\r\n                      <Grid item xs={6} sm={4} md={3} lg={2}>\r\n                        <TextField\r\n                          name=\"fecha_desde\"\r\n                          label=\"Fecha Inicio\"\r\n                          type=\"date\"\r\n                          value={value.fecha_desde}\r\n                          //defaultValue=\"2017-05-24\"\r\n                          className={classes.textField}\r\n                          InputLabelProps={{\r\n                            shrink: true,\r\n                          }}\r\n                          onChange={onChangeVal}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6} sm={4} md={3} lg={2}>\r\n                        <TextField\r\n                          label=\"Fecha Culminación\"\r\n                          type=\"date\"\r\n                          defaultValue=\"2017-05-24\"\r\n                          className={classes.textField}\r\n                          InputLabelProps={{\r\n                            shrink: true,\r\n                          }}\r\n                          name=\"fecha_hasta\"\r\n                          value={value.fecha_hasta}\r\n                          onChange={onChangeVal}\r\n                        />\r\n                      </Grid>\r\n                      <Grid\r\n                        item\r\n                        style={{ display: \"flex\" }}\r\n                        xs={12}\r\n                        sm={4}\r\n                        md={3}\r\n                        lg={4}\r\n                      >\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          color=\"secondary\"\r\n                          className={classes.button}\r\n                          startIcon={<SearchIcon fontSize=\"small\" />}\r\n                          onClick={onSubmit}\r\n                          size=\"small\"\r\n                        >\r\n                          Buscar\r\n                        </Button>\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          color=\"secondary\"\r\n                          className={classes.button}\r\n                          startIcon={<ArrowDownwardIcon fontSize=\"small\" />}\r\n                        >\r\n                          Excel\r\n                        </Button>\r\n                        <ExportarExcel enviarjsonGrid={cotizaciones} />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Paper>\r\n                </Grid>\r\n              </Grid>\r\n              {/* ************************************************ */}\r\n            </Grid>\r\n\r\n            <>\r\n              {titulo == \"Porcentajes Totales\" ? (\r\n                <>\r\n                  <Grid item xs={12} sm={12} md={12} md={8}>\r\n                    <Paper elevation={8} className={classes.paper}>\r\n                      <GridPorcTotal enviardataGrid={cotizaciones} />\r\n                    </Paper>\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={12} md={12} md={4}>\r\n                    <Paper\r\n                      elevation={8}\r\n                      className={`${classes.paper} ${classes.chart}`}\r\n                    >\r\n                      <GrafCotVsEm enviardataGraph={graphdataCot} />\r\n                    </Paper>\r\n                  </Grid>\r\n                </>\r\n              ) : titulo == \"Cotizaciones Oceánica\" ? (\r\n                <>\r\n                  <Grid item xs={12} sm={12} md={12} md={8}>\r\n                    <Paper elevation={8} className={classes.paper}>\r\n                      <GridCotOcea enviardataGrid={cotizaciones} />\r\n                    </Paper>\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={12} md={12} md={4}>\r\n                    <Paper\r\n                      elevation={8}\r\n                      className={`${classes.paper} ${classes.chart}`}\r\n                    >\r\n                      <Grafico\r\n                        enviardataGraph={graphdataCot}\r\n                        valor=\"realizadas\"\r\n                      />\r\n                    </Paper>\r\n                    <Paper elevation={8} className={classes.paper}>\r\n                      <Grafico\r\n                        enviardataGraph={graphdataCot2}\r\n                        valor=\"emitidas\"\r\n                      />\r\n                    </Paper>\r\n                  </Grid>\r\n                </>\r\n              ) : titulo == \"Cotizaciones por Productos\" ? (\r\n                <>\r\n                  <Grid item xs={12} sm={12} md={12} md={8}>\r\n                    <Paper elevation={8} className={classes.paper}>\r\n                      <GridCotProdOcea enviardataGrid={cotizaciones} />\r\n                    </Paper>\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={12} md={12} md={4}>\r\n                    <Paper\r\n                      elevation={8}\r\n                      className={`${classes.paper} ${classes.chart}`}\r\n                    >\r\n                      <Graficoproductos enviardataGraph={graphdataCot} />\r\n                    </Paper>\r\n                  </Grid>\r\n                </>\r\n              ) : titulo == \"Cotizaciones por Perfil\" ? (\r\n                <>\r\n                  <Grid item xs={12} sm={12} md={12} md={8}>\r\n                    <Paper elevation={8} className={classes.paper}>\r\n                      <GridCotOceaPerfil enviardataGrid={cotizaciones} />\r\n                    </Paper>\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={12} md={12} md={4}>\r\n                    <Paper\r\n                      elevation={8}\r\n                      className={`${classes.paper} ${classes.chart}`}\r\n                      style={{ height: 300 }}\r\n                    >\r\n                      <Graficoprodperfil enviardataGraph={graphdataCot} />\r\n                    </Paper>\r\n                  </Grid>\r\n                </>\r\n              ) : titulo == \"Cotizaciones Emitidas por Productos\" ? (\r\n                <>\r\n                  <Grid item xs={12} sm={12} md={12} md={8}>\r\n                    <Paper elevation={8} className={classes.paper}>\r\n                      <GridCotProdOcea enviardataGrid={cotizaciones} />\r\n                    </Paper>\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={12} md={12} md={4}>\r\n                    <Paper\r\n                      elevation={8}\r\n                      className={`${classes.paper} ${classes.chart}`}\r\n                    >\r\n                      <Graficoproductos enviardataGraph={graphdataCot} />\r\n                    </Paper>\r\n                  </Grid>\r\n                </>\r\n              ) : titulo == \"Cotizaciones Emitidas por Perfil\" ? (\r\n                <>\r\n                  <Grid item xs={12} sm={12} md={12} md={8}>\r\n                    <Paper elevation={8} className={classes.paper}>\r\n                      <GridCotOceaPerfil enviardataGrid={cotizaciones} />\r\n                    </Paper>\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={12} md={12} md={4}>\r\n                    <Paper\r\n                      elevation={8}\r\n                      className={`${classes.paper} ${classes.chart}`}\r\n                    >\r\n                      <Graficoprodperfil enviardataGraph={graphdataCot} />\r\n                    </Paper>\r\n                  </Grid>\r\n                </>\r\n              ) : (\r\n                \"Otra Opcion\"\r\n              )}\r\n            </>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TabContent;\r\n\r\n{\r\n  /* <Grid item xs={12} sm={12} md={12} md={8}>\r\n<Paper elevation={8} className={classes.paper}>\r\n  <XGrid />\r\n</Paper>\r\n</Grid>\r\n<Grid item xs={12} sm={12} md={12} md={4}>\r\n<Paper\r\n  elevation={8}\r\n  className={`${classes.paper} ${classes.chart}`}\r\n>\r\n  <Chart />\r\n</Paper>\r\n<Paper elevation={8} className={classes.paper}>\r\n  <Chart />\r\n</Paper>\r\n</Grid> */\r\n}\r\n","C:\\Users\\lramirez\\Desktop\\oceanicaproyecto\\src\\components\\tablas\\GridCotOcea.js",[],"C:\\Users\\lramirez\\Desktop\\oceanicaproyecto\\src\\components\\graficos\\Grafico.js",[],"C:\\Users\\lramirez\\Desktop\\oceanicaproyecto\\src\\components\\tablas\\GridPorcTotal.js",["96"],"import React, { useEffect, useState, useStyles } from \"react\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport moment from \"moment\";\r\nimport PropTypes from \"prop-types\";\r\nimport { XGrid } from \"@material-ui/x-grid\";\r\n\r\nconst columns = [\r\n  {\r\n    field: \"id\",\r\n    headerName: \"TOTAL COTIZACIONES\",\r\n    width: 250,\r\n    fontSize: \"18px\",\r\n  },\r\n  {\r\n    field: \"COTIZACIONES_EMITIDAS\",\r\n    headerName: \"EMITIDAS\",\r\n    width: 150,\r\n    type: \"number\",\r\n  },\r\n  // {\r\n  //   field: \"PORC_COT_EMITIDAS\",\r\n  //   headerName: \"% EMITIDAS\",\r\n  //   width: 150,\r\n  //   fontSize: \"18px\",\r\n  //   display: \"none\",\r\n  // },\r\n  {\r\n    field: \"COTIZACIONES_NO_EMITIDAS\",\r\n    headerName: \"NO EMITIDAS\",\r\n    width: 150,\r\n    type: \"number\",\r\n    display: \"none\",\r\n  },\r\n  // {\r\n  //   field: \"PORC_COT_NO_EMITIDAS\",\r\n  //   headerName: \"% NO EMITIDAS\",\r\n  //   width: 150,\r\n  //   fontSize: \"18px\",\r\n  //   display: \"none\",\r\n  // },\r\n];\r\n\r\nexport default function App({ enviardataGrid }) {\r\n  const [rows, setRows] = useState([]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"prod ocea\" + enviardataGrid);\r\n\r\n    var ArrCotizaciones = enviardataGrid.map((item) => {\r\n      // var fecha_ini = item.DATE_CREATION.substring(0, 10);\r\n\r\n      //  var fecha = moment(fecha_ini, 'YYYY-MM-DD', true).format(\"DD/MM/YYYY\");\r\n      return {\r\n        id: item.TOTAL_COTIZACIONES,\r\n        TOTAL_COTIZACIONES: item.TOTAL_COTIZACIONES,\r\n        COTIZACIONES_EMITIDAS: item.COTIZACIONES_EMITIDAS,\r\n        PORC_COT_EMITIDAS: item.PORC_COT_EMITIDAS,\r\n        COTIZACIONES_NO_EMITIDAS: item.COTIZACIONES_NO_EMITIDAS,\r\n        PORC_COT_NO_EMITIDAS: item.PORC_COT_NO_EMITIDAS,\r\n      };\r\n    });\r\n\r\n    setRows(ArrCotizaciones);\r\n  }, [enviardataGrid]);\r\n\r\n  function CustomPagination(props) {\r\n    const { state, api } = props;\r\n    const classes = useStyles();\r\n\r\n    return (\r\n      <Pagination\r\n        className={classes.root}\r\n        color=\"primary\"\r\n        page={state.pagination.page}\r\n        count={state.pagination.pageCount}\r\n        onChange={(event, value) => api.current.setPage(value)}\r\n      />\r\n    );\r\n  }\r\n\r\n  CustomPagination.propTypes = {\r\n    /**\r\n     * ApiRef that let you manipulate the grid.\r\n     */\r\n    api: PropTypes.shape({\r\n      current: PropTypes.object.isRequired,\r\n    }).isRequired,\r\n    /**\r\n     * The GridState object containing the current grid state.\r\n     */\r\n    state: PropTypes.object.isRequired,\r\n  };\r\n\r\n  return (\r\n    <div id=\"GridCotProd\" style={{ height: 300, width: \"100%\" }}>\r\n      <XGrid\r\n        rows={rows}\r\n        columns={columns}\r\n        pagination\r\n        pageSize={5}\r\n        rowsPerPageOptions={[10, 20, 30]}\r\n        showToolbar\r\n        density=\"compact\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\lramirez\\Desktop\\oceanicaproyecto\\src\\components\\graficos\\GrafCotVsEm.js",["97"],"import React, { useState, useEffect } from \"react\";\r\nimport { Pie } from \"@reactchartjs/react-chart.js\";\r\n\r\nconst PieChart = ({ enviardataGraph }) => {\r\n  const [rows, setRows] = useState([]);\r\n  const [realizadas, setRealizadas] = useState(0);\r\n\r\n  const data = {\r\n    // labels:areas,\r\n    labels: [\"Cotizaciones Emitidas\", \"Cotizaciones No Emitidas\"],\r\n\r\n    datasets: [\r\n      {\r\n        // label: 'Cotizaciones Productos',\r\n        data: rows,\r\n        options: {\r\n          legend: {\r\n            display: true,\r\n            labels: {\r\n              fontColor: \"red\",\r\n              fontSize: \"20px\",\r\n            },\r\n          },\r\n        },\r\n\r\n        backgroundColor: [\"#2980B9\", \"#2E8B57\", \"#F9D120\", \"red\", \"#8FBC8F\"],\r\n        borderColor: [\"#2980B9\", \"#2E8B57\", \"#F9D120\", \"red\", \"#8FBC8F\"],\r\n        borderWidth: 1,\r\n      },\r\n    ],\r\n    options: {\r\n      title: {\r\n        display: true,\r\n        text: \"Título del gráfico\",\r\n      },\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    // console.log('desde el graphTOTALES values:  ' + JSON.stringify(enviardataGraph));\r\n\r\n    //  if (enviardataGraph) {\r\n    //     alert('NUlo' + JSON.stringify(enviardataGraph));\r\n    //  }\r\n    //  else  {\r\n    //     alert(' MAC ' + JSON.stringify(enviardataGraph.TOTAL_COTIZACIONES));\r\n    //  }\r\n\r\n    if (enviardataGraph.length > 0) {\r\n      const nums = [\r\n        //    enviardataGraph[0].TOTAL_COTIZACIONES,\r\n        // enviardataGraph[0].COTIZACIONES_EMITIDAS,\r\n\r\n        enviardataGraph[0].PORC_COT_EMITIDAS,\r\n        // enviardataGraph[0].COTIZACIONES_NO_EMITIDAS,\r\n        enviardataGraph[0].PORC_COT_NO_EMITIDAS,\r\n      ];\r\n      setRows(nums);\r\n      let totalRealizadas = nums.reduce((a, b) => a + b, 0);\r\n\r\n      setRealizadas(totalRealizadas);\r\n    }\r\n\r\n    //const Arrareas = enviardataGraph.map(cot => cot.AREA.substring(14));\r\n    // const Arrareas = enviardataGraph[0].map(cot => cot.AREA);\r\n\r\n    //setAreas(Arrareas);\r\n  }, [enviardataGraph]);\r\n\r\n  return (\r\n    <div className=\"chartPie\">\r\n      <Pie data={data} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PieChart;\r\n","C:\\Users\\lramirez\\Desktop\\oceanicaproyecto\\src\\components\\tablas\\GridCotProdOcea.js",["98"],"import React, { useEffect, useState, useStyles } from \"react\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport moment from \"moment\";\r\nimport PropTypes from \"prop-types\";\r\nimport { XGrid } from \"@material-ui/x-grid\";\r\n\r\nconst columns = [\r\n  { field: \"AREA\", headerName: \"AREA\", width: 340, fontSize: \"18px\" },\r\n  {\r\n    field: \"COTIZACIONES\",\r\n    headerName: \"COTIZACIONES\",\r\n    width: 320,\r\n    type: \"number\",\r\n  },\r\n  // { field: 'id', headerName: 'Nro Cotizacion', width: 170, type: 'number' },\r\n];\r\n\r\nexport default function App({ enviardataGrid }) {\r\n  const [rows, setRows] = useState([]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"prod ocea\" + enviardataGrid);\r\n\r\n    var ArrCotizaciones = enviardataGrid.map((item) => {\r\n      // var fecha_ini = item.DATE_CREATION.substring(0, 10);\r\n\r\n      //  var fecha = moment(fecha_ini, 'YYYY-MM-DD', true).format(\"DD/MM/YYYY\");\r\n      return {\r\n        id: item.COTIZACIONES,\r\n        COTIZACIONES: item.COTIZACIONES,\r\n        AREA: item.AREA,\r\n      };\r\n    });\r\n\r\n    setRows(ArrCotizaciones);\r\n  }, [enviardataGrid]);\r\n\r\n  function CustomPagination(props) {\r\n    const { state, api } = props;\r\n    const classes = useStyles();\r\n\r\n    return (\r\n      <Pagination\r\n        className={classes.root}\r\n        color=\"primary\"\r\n        page={state.pagination.page}\r\n        count={state.pagination.pageCount}\r\n        onChange={(event, value) => api.current.setPage(value)}\r\n      />\r\n    );\r\n  }\r\n\r\n  CustomPagination.propTypes = {\r\n    /**\r\n     * ApiRef that let you manipulate the grid.\r\n     */\r\n    api: PropTypes.shape({\r\n      current: PropTypes.object.isRequired,\r\n    }).isRequired,\r\n    /**\r\n     * The GridState object containing the current grid state.\r\n     */\r\n    state: PropTypes.object.isRequired,\r\n  };\r\n\r\n  return (\r\n    <div id=\"GridCotProd\" style={{ height: 300 }}>\r\n      <XGrid\r\n        rows={rows}\r\n        columns={columns}\r\n        pagination\r\n        pageSize={5}\r\n        rowsPerPageOptions={[10, 20, 30]}\r\n        showToolbar\r\n        density=\"compact\"\r\n        // filterModel={{\r\n        //   items: [\r\n\r\n        //   ],\r\n        // }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\lramirez\\Desktop\\oceanicaproyecto\\src\\components\\graficos\\Graficoproductos.js",["99"],"import React, { useState, useEffect } from \"react\";\r\nimport { Pie } from \"@reactchartjs/react-chart.js\";\r\n\r\nconst PieChart = ({ enviardataGraph }) => {\r\n  const [rows, setRows] = useState([]);\r\n  const [areas, setAreas] = useState([]);\r\n  const [realizadas, setRealizadas] = useState(0);\r\n\r\n  const data = {\r\n    labels: areas,\r\n\r\n    datasets: [\r\n      {\r\n        // label: 'Cotizaciones Productos',\r\n        data: rows,\r\n        options: {\r\n          legend: {\r\n            display: true,\r\n            labels: {\r\n              fontColor: \"red\",\r\n              fontSize: \"20px\",\r\n            },\r\n          },\r\n        },\r\n\r\n        backgroundColor: [\"#2980B9\", \"#2E8B57\", \"#F9D120\", \"red\", \"#8FBC8F\"],\r\n        borderColor: [\"#2980B9\", \"#2E8B57\", \"#F9D120\", \"red\", \"#8FBC8F\"],\r\n        borderWidth: 1,\r\n      },\r\n    ],\r\n    options: {\r\n      title: {\r\n        display: true,\r\n        text: \"Título del gráfico\",\r\n      },\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    //  console.log('desde el graph values:  ' + JSON.stringify(enviardataGraph));\r\n    const nums = enviardataGraph.map((cot) => cot.COTIZACIONES);\r\n    //const Arrareas = enviardataGraph.map(cot => cot.AREA.substring(14));\r\n    const Arrareas = enviardataGraph.map((cot) => cot.AREA.substring(14));\r\n    setRows(nums);\r\n    setAreas(Arrareas);\r\n    let totalRealizadas = nums.reduce((a, b) => a + b, 0);\r\n    setRealizadas(totalRealizadas);\r\n  }, [enviardataGraph]);\r\n\r\n  return (\r\n    <div className=\"chartPie\">\r\n      <Pie data={data} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PieChart;\r\n","C:\\Users\\lramirez\\Desktop\\oceanicaproyecto\\src\\components\\tablas\\GridCotOceaPerfil.js",["100"],"import React, { useEffect, useState, useStyles } from \"react\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport moment from \"moment\";\r\nimport PropTypes from \"prop-types\";\r\nimport { XGrid } from \"@material-ui/x-grid\";\r\n\r\nconst columns = [\r\n  { field: \"PERFIL\", headerName: \"PERFIL\", width: 340, fontSize: \"18px\" },\r\n  {\r\n    field: \"COTIZACIONES\",\r\n    headerName: \"COTIZACIONES\",\r\n    width: 320,\r\n    type: \"number\",\r\n  },\r\n];\r\n\r\nexport default function App({ enviardataGrid }) {\r\n  const [rows, setRows] = useState([]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"prod ocea\" + enviardataGrid);\r\n\r\n    var ArrCotizaciones = enviardataGrid.map((item) => {\r\n      // var fecha_ini = item.DATE_CREATION.substring(0, 10);\r\n\r\n      //  var fecha = moment(fecha_ini, 'YYYY-MM-DD', true).format(\"DD/MM/YYYY\");\r\n      return {\r\n        id: item.COTIZACIONES,\r\n        COTIZACIONES: item.COTIZACIONES,\r\n        PERFIL: item.PERFIL,\r\n      };\r\n    });\r\n\r\n    setRows(ArrCotizaciones);\r\n  }, [enviardataGrid]);\r\n\r\n  function CustomPagination(props) {\r\n    const { state, api } = props;\r\n    const classes = useStyles();\r\n\r\n    return (\r\n      <Pagination\r\n        className={classes.root}\r\n        color=\"primary\"\r\n        page={state.pagination.page}\r\n        count={state.pagination.pageCount}\r\n        onChange={(event, value) => api.current.setPage(value)}\r\n      />\r\n    );\r\n  }\r\n\r\n  CustomPagination.propTypes = {\r\n    /**\r\n     * ApiRef that let you manipulate the grid.\r\n     */\r\n    api: PropTypes.shape({\r\n      current: PropTypes.object.isRequired,\r\n    }).isRequired,\r\n    /**\r\n     * The GridState object containing the current grid state.\r\n     */\r\n    state: PropTypes.object.isRequired,\r\n  };\r\n\r\n  return (\r\n    <div id=\"GridCotProd\" style={{ height: 300 }}>\r\n      <XGrid\r\n        rows={rows}\r\n        columns={columns}\r\n        pagination\r\n        pageSize={5}\r\n        rowsPerPageOptions={[10, 20, 30]}\r\n        showToolbar\r\n        density=\"compact\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\lramirez\\Desktop\\oceanicaproyecto\\src\\components\\graficos\\Graficoprodperfil.js",["101"],"import React, { useState, useEffect } from \"react\";\r\nimport { Pie } from \"@reactchartjs/react-chart.js\";\r\n\r\nconst PieChart = ({ enviardataGraph }) => {\r\n  const [rows, setRows] = useState([]);\r\n  const [areas, setAreas] = useState([]);\r\n  const [realizadas, setRealizadas] = useState(0);\r\n\r\n  const data = {\r\n    labels: areas,\r\n\r\n    datasets: [\r\n      {\r\n        // label: 'Cotizaciones Productos',\r\n        data: rows,\r\n        options: {\r\n          legend: {\r\n            display: true,\r\n            labels: {\r\n              fontColor: \"red\",\r\n              fontSize: \"20px\",\r\n            },\r\n          },\r\n        },\r\n\r\n        backgroundColor: [\"#2980B9\", \"#2E8B57\", \"#F9D120\", \"red\", \"#8FBC8F\"],\r\n        borderColor: [\"#2980B9\", \"#2E8B57\", \"#F9D120\", \"red\", \"#8FBC8F\"],\r\n        borderWidth: 1,\r\n      },\r\n    ],\r\n    options: {\r\n      title: {\r\n        display: true,\r\n        text: \"Título del gráfico\",\r\n      },\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    // console.log('desde el graph values:  ' + JSON.stringify(enviardataGraph));\r\n    const nums = enviardataGraph.map((cot) => cot.COTIZACIONES);\r\n    const Arrperfiles = enviardataGraph.map((cot) => cot.PERFIL);\r\n    console.log(\"Perfiles \" + Arrperfiles);\r\n    setRows(nums);\r\n    setAreas(Arrperfiles);\r\n    let totalRealizadas = nums.reduce((a, b) => a + b, 0);\r\n    setRealizadas(totalRealizadas);\r\n  }, [enviardataGraph]);\r\n\r\n  return (\r\n    <div className=\"chartPie\">\r\n      <Pie data={data} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PieChart;\r\n",["102","103"],"C:\\Users\\lramirez\\Desktop\\oceanicaproyecto\\src\\components\\Exportarexcel.js",[],{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":30,"column":11,"nodeType":"110","endLine":30,"endColumn":52},{"ruleId":"111","severity":1,"message":"112","line":51,"column":3,"nodeType":"113","messageId":"114","endLine":51,"endColumn":8},{"ruleId":"115","severity":1,"message":"116","line":156,"column":6,"nodeType":"117","endLine":156,"endColumn":8,"suggestions":"118"},{"ruleId":"119","severity":1,"message":"120","line":237,"column":23,"nodeType":"121","messageId":"114","endLine":237,"endColumn":25},{"ruleId":"122","severity":1,"message":"123","line":239,"column":54,"nodeType":"124","endLine":239,"endColumn":60},{"ruleId":"122","severity":1,"message":"123","line":244,"column":54,"nodeType":"124","endLine":244,"endColumn":60},{"ruleId":"119","severity":1,"message":"120","line":253,"column":26,"nodeType":"121","messageId":"114","endLine":253,"endColumn":28},{"ruleId":"122","severity":1,"message":"123","line":255,"column":54,"nodeType":"124","endLine":255,"endColumn":60},{"ruleId":"122","severity":1,"message":"123","line":260,"column":54,"nodeType":"124","endLine":260,"endColumn":60},{"ruleId":"119","severity":1,"message":"120","line":278,"column":26,"nodeType":"121","messageId":"114","endLine":278,"endColumn":28},{"ruleId":"122","severity":1,"message":"123","line":280,"column":54,"nodeType":"124","endLine":280,"endColumn":60},{"ruleId":"122","severity":1,"message":"123","line":285,"column":54,"nodeType":"124","endLine":285,"endColumn":60},{"ruleId":"119","severity":1,"message":"120","line":294,"column":26,"nodeType":"121","messageId":"114","endLine":294,"endColumn":28},{"ruleId":"122","severity":1,"message":"123","line":296,"column":54,"nodeType":"124","endLine":296,"endColumn":60},{"ruleId":"122","severity":1,"message":"123","line":301,"column":54,"nodeType":"124","endLine":301,"endColumn":60},{"ruleId":"119","severity":1,"message":"120","line":311,"column":26,"nodeType":"121","messageId":"114","endLine":311,"endColumn":28},{"ruleId":"122","severity":1,"message":"123","line":313,"column":54,"nodeType":"124","endLine":313,"endColumn":60},{"ruleId":"122","severity":1,"message":"123","line":318,"column":54,"nodeType":"124","endLine":318,"endColumn":60},{"ruleId":"119","severity":1,"message":"120","line":327,"column":26,"nodeType":"121","messageId":"114","endLine":327,"endColumn":28},{"ruleId":"122","severity":1,"message":"123","line":329,"column":54,"nodeType":"124","endLine":329,"endColumn":60},{"ruleId":"122","severity":1,"message":"123","line":334,"column":54,"nodeType":"124","endLine":334,"endColumn":60},{"ruleId":"125","severity":1,"message":"126","line":356,"column":1,"nodeType":"127","messageId":"128","endLine":373,"endColumn":2},{"ruleId":"129","severity":1,"message":"130","line":3,"column":8,"nodeType":"131","messageId":"132","endLine":3,"endColumn":14},{"ruleId":"129","severity":1,"message":"133","line":6,"column":10,"nodeType":"131","messageId":"132","endLine":6,"endColumn":20},{"ruleId":"129","severity":1,"message":"130","line":3,"column":8,"nodeType":"131","messageId":"132","endLine":3,"endColumn":14},{"ruleId":"129","severity":1,"message":"133","line":7,"column":10,"nodeType":"131","messageId":"132","endLine":7,"endColumn":20},{"ruleId":"129","severity":1,"message":"130","line":3,"column":8,"nodeType":"131","messageId":"132","endLine":3,"endColumn":14},{"ruleId":"129","severity":1,"message":"133","line":7,"column":10,"nodeType":"131","messageId":"132","endLine":7,"endColumn":20},{"ruleId":"104","replacedBy":"134"},{"ruleId":"106","replacedBy":"135"},"no-native-reassign",["136"],"no-negated-in-lhs",["137"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-dupe-keys","Duplicate key 'paper'.","ObjectExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'cotizaciones', 'fecha_hasta', 'url', 'urlGraph', 'urlGraph2', and 'value'. Either include them or remove the dependency array.","ArrayExpression",["138"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","no-unused-vars","'moment' is defined but never used.","Identifier","unusedVar","'realizadas' is assigned a value but never used.",["136"],["137"],"no-global-assign","no-unsafe-negation",{"desc":"139","fix":"140"},"Update the dependencies array to be: [cotizaciones, fecha_hasta, url, urlGraph, urlGraph2, value]",{"range":"141","text":"142"},[4898,4900],"[cotizaciones, fecha_hasta, url, urlGraph, urlGraph2, value]"]